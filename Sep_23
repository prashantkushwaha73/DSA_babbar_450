********************************************************************************
**** 1 - 102 - Value equal to index value ( 02/09/23 ) ****

class Solution{
public:

	vector<int> valueEqualToIndex(int arr[], int n) {
	    vector<int> ans;
	    for(int i=0;i<n;i++){
	        if(i+1 == arr[i]){
	            ans.push_back(arr[i]);
	        }
	    }
	    return ans;
	}
};

*************************************************************************
**** 2 - 275 - Rat in a Maze Problem - I ( 02/09/23 ) ****

// User function template for C++

class Solution{
    private:
    bool can(int newx,int newy,int n,vector<vector<int>>& track,vector<vector<int>>& m){
        if((newx>=0 && newx<n) && (newy>=0 && newy<n) && track[newx][newy]==0 && m[newx][newy]==1){
            return true;
        }
        else{
            return false;
        }
    }
    
    void solve(vector<vector<int>>& m, int n, vector<vector<int>>& track,string store,int x,int y,vector<string>& ans){
        if(x==n-1 && y==n-1){
            ans.push_back(store);
            return;
        }
        track[x][y]=1;
        //left
        int newx=x,newy=y-1;
        if(can(newx,newy,n,track,m)){
            store.push_back('L');
            solve(m,n,track,store,newx,newy,ans);
            store.pop_back();
        }
        //right
        newx=x,newy=y+1;
        if(can(newx,newy,n,track,m)){
            store.push_back('R');
            solve(m,n,track,store,newx,newy,ans);
            store.pop_back();
        }
        //up
        newx=x-1,newy=y;
        if(can(newx,newy,n,track,m)){
            store.push_back('U');
            solve(m,n,track,store,newx,newy,ans);
            store.pop_back();
        }
        //down
        newx=x+1,newy=y;
        if(can(newx,newy,n,track,m)){
            store.push_back('D');
            solve(m,n,track,store,newx,newy,ans);
            store.pop_back();
        }
        track[x][y]=0;
        
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<vector<int>> track=m;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                track[i][j]=0;
            }
        }
        string store="";
        int x=0,y=0;
        vector<string> ans;
        if(m[0][0]==0){
            return ans;
        }
        solve(m,n,track,store,x,y,ans);
        sort(ans.begin(),ans.end());
        return ans;
        
    }
};

***************************************************************************************
**** 3 - 188 - Bottom View of Binary Tree ( 03/09/23 ) ****

class Solution {
  public:
    vector <int> bottomView(Node *root) {
         map<int,int> nodes;
        queue<pair<Node*,int>> q;
        q.push(make_pair(root,0));
        vector<int> ans;
        if(root==NULL){
            return ans;
        }
        while(!q.empty()){
           pair<Node*,int> temp=q.front();
           q.pop();
           Node* node=temp.first;
           int hd=temp.second;
           nodes[hd]=node->data;
           if(node->left){
               q.push(make_pair(node->left,hd-1));
           }
           if(node->right){
               q.push(make_pair(node->right,hd+1));
           }
        }
        for(auto i:nodes){
            ans.push_back(i.second);
        }
        return ans;
    }
};

*******************************************************************************************
**** 4 - 397 -  Number of Triangles ( 03/09/23 ) **** 

class Solution
{
    public:
        int numberOfTriangles(vector<vector<int>> &g,int n)
        {
            int ans = 0;
            for(int i=0;i<n;i++){
                for(int j=i+1;j<n;j++){
                    for(int k=j+1;k<n;k++){
                        if(g[i][j] && g[j][k] && g[k][i]){
                            ans++;
                        }
                        if(g[i][k] && g[k][j] && g[j][i]){
                            ans++;
                        }
                    
                    }
                }
            }
            return ans;
        }
};

********************************************************************************************
**** 5 - 252 - Maximum product subset of an array ( 05/09/23 ) ****

class Solution{
    public:
    
    void solve(long long int& ans,int b){
        ans = (ans*b)%1000000007;
    }
    
    long long int findMaxProduct(vector<int>&a, int n){
        sort(a.begin(),a.end());
        int neg = 0;
        int negi ;
        int zeros = 0;
        int zeroi ;
        int posi = 0;
        for(int i=0;i<a.size();i++){
            if(a[i] < 0){
                neg++;
                negi = i;
            }
            else if(a[i] > 0){
                posi++;
            }
            else{
                zeros++;
                zeroi = i;
            }
        }
        long long int ans = 1;
        if(posi == 0){
            if(neg <= 1 && zeros){
                return 0;
            }
            if(neg <= 1 && zeros == 0){
                return a[0];
            }
            if(neg%2){
                for(int i=0;i<negi;i++){
                    solve(ans,a[i]);
                }
            }
            else{
                for(int i=0;i<=negi;i++){
                    solve(ans,a[i]);
                }
            }
        }
        else{
            if(zeros){
                for(int i=zeroi+1;i<a.size();i++){
                    solve(ans,a[i]);
                }
            }
            else if(neg){
                for(int i=negi+1;i<a.size();i++){
                    solve(ans,a[i]);
                }
            }
            else{
                for(int i=0;i<a.size();i++){
                    solve(ans,a[i]);
                }
            }
            
            if(neg > 1){
                  if(neg%2){
                for(int i=0;i<negi;i++){
                    solve(ans,a[i]);
                }
            }
            else{
                for(int i=0;i<=negi;i++){
                    solve(ans,a[i]);
                }
            }
            }
        }
        return ans;
    }
};

*********************************************************************************************************************
**** 6 - 130 - Allocate minimum number of pages ( 05/09/23 ) ****

class Solution 
{
    public:
    //Function to find minimum number of pages.
    bool check(int mid,int a[],int n,int m){
        int c=0;
        int sum=0;
        for(int i=0;i<n;i++){
            if(sum+a[i]<=mid){
                sum+=a[i];
            }
            else{
                c++;
                sum=a[i];
            }
        }
        if(sum>0) c++;
        if(c>m) return true;
        return false;
    }
    int findPages(int A[], int N, int M) 
    {
        //code here
        // sort(A,A+N);
        if(M>N) return -1;
        int l=0;
        int h=0;
        for(int i=0;i<N;i++){
            l=max(l,A[i]);
            h+=A[i];
        }
        while(l<=h){
            int mid=(l+h)/2;
            if(check(mid,A,N,M)){
                l=mid+1;
            }
            else h=mid-1;
        }
        return l;
    }
};

*****************************************************************************
**** 7 - 76 - Count the Reversals ( 06/09/23 ) ****

int countRev (string s)
{
    int ans = 0;
    stack<char> st;
    for(int i=0;i<s.size();i++){
        if(st.empty()){
            if(s[i] == '{'){
                st.push('{');
            }
            else{
                st.push('{');
                ans ++;
            }
        }
        else{
            if(s[i] == '{'){
                st.push('{');
            }
            else{
                st.pop();
            }
        }
    }
    if(st.size()%2){
        return -1;
    }
    return ans+(st.size()/2);
}

************************************************************************************
**** 8 - 30 - Count More than n/k Occurences ( 08/09/23 ) ****

class Solution
{
    public:
    //Function to find all elements in array that appear more than n/k times.
    int countOccurence(int arr[], int n, int k) {
        unordered_map<int,int> m;
        for(int i=0;i<n;i++){
            m[arr[i]]++;
        }
        int ans = 0;
        for(auto i:m){
            if(i.second > n/k){
                ans++;
            }
        }
        return ans;
    }
};

**************************************************************************************
**** 9 -174 - First non-repeating character in a stream ( 08/09/23 ) ****

class Solution {
	public:
		string FirstNonRepeating(string A){
		     string ans="";
		     queue<char> q;
		     unordered_map<char,int> m;
		     for(int i=0;i<A.size();i++){
		         m[A[i]]++;
		         if(m[A[i]]==1){
		             q.push(A[i]);
		         }
		        
		            
		             while(!q.empty() && m[q.front()]!=1){
		                 q.pop();
		             }
		             if(q.empty()){
		                 ans+='#';
		             }
		             else{
		                 ans+=q.front();
		             }
		        
		     }
		     return ans;
		}
};

********************************************************************************************
