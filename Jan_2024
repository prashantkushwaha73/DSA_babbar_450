**********************************************************************************************
**** 1 - 48 - Sorted matrix ( 12/01/24 ) ****

class Solution {
  public:
    vector<vector<int>> sortedMatrix(int N, vector<vector<int>> mat) {
        vector<int> v;
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                v.push_back(mat[i][j]);
            }
        }
        sort(v.begin(),v.end());
        int posi = 0;
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                mat[i][j] = v[posi];
                posi++;
            }
        }
        return mat;
    }
};

**********************************************************************************************************
**** 2 - 462 - Mobile numeric keypad ( 12/01/24 ) ****

class Solution{
	public:
	void fill(unordered_map<int,vector<int>>& m){
	    m[0].push_back(0);m[0].push_back(8);
	    m[1].push_back(1);m[1].push_back(2);m[1].push_back(4);
	    m[2].push_back(2);m[2].push_back(1);m[2].push_back(3);m[2].push_back(5);
	    m[3].push_back(3);m[3].push_back(2);m[3].push_back(6);
	    m[4].push_back(4);m[4].push_back(1);m[4].push_back(5);m[4].push_back(7);
	    m[5].push_back(5);m[5].push_back(2);m[5].push_back(4);m[5].push_back(6);m[5].push_back(8);
	    m[6].push_back(6);m[6].push_back(3);m[6].push_back(5);m[6].push_back(9);
	    m[7].push_back(7);m[7].push_back(4);m[7].push_back(8);
	    m[8].push_back(8);m[8].push_back(5);m[8].push_back(7);m[8].push_back(9);m[8].push_back(0);
	    m[9].push_back(9);m[9].push_back(6);m[9].push_back(8);
	}
	long long solve(unordered_map<int,vector<int>>& m,int count,int prev,vector<vector<long long>>& dp){
	    if(count==0){
	        return 1;
	    }
	    if(dp[prev][count]!=-1){
	        return dp[prev][count];
	    }
	    long long v = 0;
	    for(int i=0;i<m[prev].size();i++){
	        v += solve(m,count-1,m[prev][i],dp);
	    }
	    return dp[prev][count] = v;
	}
	long long getCount(int N)
	{
		unordered_map<int,vector<int>> m;
		long long ans = 0;
		vector<vector<long long>> dp(10,vector<long long> (N+1,-1));
		fill(m);
		if(N==1){
		    return 10;
		}
		for(int i=0;i<10;i++){
		    ans += solve(m,N-1,i,dp);
		}
		return ans;
	}
};

**********************************************************************************************************************
**** 3 - 118 -  Minimum Swaps to Sort ( 17/01/24 ) ****

class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
	int minSwaps(vector<int>&nums)
	{
	    vector<int> v=nums;
	    sort(v.begin(),v.end());
	    unordered_map<int,int> m;
	    for(int i=0;i<v.size();i++){
	        m[v[i]]=i;
	    }
	    int ans = 0;
	    for(int i=0;i<nums.size();i++){
	        if(m[nums[i]]!=i){
	            swap(nums[i],nums[m[nums[i]]]);
	            ans++;
	            i--;
	        }
	    }
	    return ans;
	}
};

********************************************************************************************************************************
