******************************************************************************************
**** 1 - 145 -  Remove duplicates from an unsorted linked list ( 01/10/23 ) ****

/*
The structure of linked list is the following

struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/


class Solution
{
    public:
    //Function to remove duplicates from unsorted linked list.
    Node * removeDuplicates( Node *head) 
    {
     unordered_map<int,bool> m;
     Node* first = head;
     m[head->data]=true;
     if(head->next){
         Node* second = head->next;
         while(second){
             if(m[second->data]){
                 first->next = second->next;
                 second = second -> next;
             }
             else{
                 m[second->data]=true;
                 first = second ;
                 second = second -> next;
             }
         }
         return head;
     }
     else{
         return first;
     }
     return NULL;
    }
};


********************************************************************************************************************
**** 2 - 33 - Triplet Sum in Array ( 02/10/23 ) ****

class Solution{
    public:
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    bool find3Numbers(int arr[], int n, int x)
    {
         sort(arr,arr+n);
         int i = 0,j,k;
         for(int i=0;i<n-2;i++){
             j = i+1; k = n-1;
             while(j<k){
                 if(arr[i]+arr[j]+arr[k] == x){
                     return true;
                 }
                 else if(arr[i]+arr[j]+arr[k] > x){
                     k--;
                 }
                 else{
                     j++;
                 }
             }
         }
         return false;
    }
};

****************************************************************************
**** 3 - 93 - Remove Consecutive Characters ( 03/10/23 ) ****

class Solution{
    public:
    string removeConsecutiveCharacter(string s)
    {
        stack<char> st;
        st.push(s[0]);
        for(int i=1;i<s.size();i++){
            if(st.top()!=s[i]){
                st.push(s[i]);
            }
        }
        string ans;
        while(!st.empty()){
            ans.push_back(st.top());
            st.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

********************************************************************************
**** 4 - 223 - Normal BST to Balanced BST ( 04/10/23 ) ****

class Solution{
    public:
    void solve1(Node* root,vector<int> &v){
        if(root==NULL){
            return;
        }
        solve1(root->left,v);
        v.push_back(root->data);
        solve1(root->right,v);
    }
    
    Node* solve2(vector<int> v,int s,int e){
        int mid = s+(e-s)/2;
        Node* temp = new Node(v[mid]);
        if(s<=mid-1){
        temp->left = solve2(v,s,mid-1);}
        if(mid+1<=e){
        temp->right = solve2(v,mid+1,e);}
        return temp;
    }
    
    Node* buildBalancedTree(Node* root)
    {
    	vector<int> v;
    	solve1(root,v);
    	return solve2(v,0,v.size()-1);
    }
};

********************************************************************************************
**** 5 - 196 - Construct Tree from Inorder & Preorder ( 09/10/23 ) ****

class Solution{
    public:
    
    int posi(int in[],int s,int e,int v){
        for(int i=s;i<=e;i++){
            if(in[i]==v){
                return i;
            }
        }
    }
    
    Node* solve(int in[],int pre[],int& i,int s,int e,int n){
        if(i>=n){
            return NULL;
        }
        Node* temp = new Node(pre[i]);
        int j = posi(in,s,e,pre[i]);
        i++;
        if(s<=j-1){
        temp->left = solve(in,pre,i,s,j-1,n);
        }
        if(j+1<=e){
            temp->right = solve(in,pre,i,j+1,e,n);
         }
         return temp;
    }
    
    Node* buildTree(int in[],int pre[], int n)
    {
        int i = 0;
        return solve(in,pre,i,0,n-1,n);
    }
};

*********************************************************************************************
**** 6 - 161 - Merge Sort on Doubly Linked List ( 10/10/23 ) ****

struct Node *sortDoubly(struct Node *head)
{
	vector<int> v;
	Node* temp = head;
	while(temp){
	    v.push_back(temp->data);
	    temp = temp->next;
	   
	}
	sort(v.begin(),v.end());
	int i = 0;
	temp = head;
	while(temp){
	    temp->data = v[i];
	    i++;
	    temp = temp->next;
	}
	return head;
}

*************************************************************************************************
**** 7 - 52 - Kth element in Matrix ( 11/10/23 ) ****

int kthSmallest(int mat[MAX][MAX], int n, int k)
{
   priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
   for(int i=0;i<n;i++){
       pq.push({mat[i][0],{i,0}});
   }
   pair<int,pair<int,int>> p;
   while(k){
       p = pq.top();
       pq.pop();
       k--;
       if(p.second.second+1 < n){
           pq.push({mat[p.second.first][p.second.second+1],{p.second.first,p.second.second+1}});
       }
   }
   return p.first;
}

****************************************************************************************************************
**** 8 - 243 - Choose and Swap ( 11/10/23 ) ****

class Solution{
public:
    string chooseandswap(string a){
        unordered_map<char,bool> check;
        char ans1,ans2;
        map<char,bool> m;
        for(int i=0;i<a.size();i++){
            m[a[i]] = true;
        }
        int p = 0;
        int count = m.size();
        bool flag = false;
        for(auto i:m){
            flag = false;
            while(check[a[p]]){
                p++;
                if(p>=a.size()){
                    return a;
                }
            }
            while(a[p]==i.first){
                flag = true;
                p++;
                if(p>=a.size()){
                    return a;
                }
            }
            
            if(flag == false){
                ans1 = i.first; ans2 = a[p];
                break;
            }
            check[i.first] = true;
        }
        for(int i=0;i<a.size();i++){
            if(a[i]==ans1){
                a[i]=ans2;
            }
            else if(a[i] == ans2){
                a[i] = ans1;
            }
        }
        return a;
    }
};

***********************************************************************************************************
**** 9 - 314 - Expression contains redundant bracket or not ( 26/10/23 ) ****

class Solution {
  public:
    int checkRedundancy(string s) {
        stack<pair<char,bool>> st;
        for(int i=0;i<s.size();i++){
            if(s[i] == '('){
                st.push({s[i],false});
            }
            else if(s[i] =='+' || s[i] == '-' || s[i] == '*' || s[i] == '/'){
                if(!st.empty()){
                    st.top().second = true;
                }
            }
            else if(s[i] == ')'){
                if(st.top().second){
                    st.pop();
                }
                else{
                    return true;
                }
            }
        }
        return false;
    }
};

************************************************************************************************************
**** 10 - 289 - Path of greater than equal to k length ( 27/10/23 ) ****

class Solution {
public:

    bool solve(int n,unordered_map<int,vector<pair<int,int>>>& edges,vector<bool>& visited,int k,int count){
      if(count >= k){
          return true;
      }
      for(int i=0;i<edges[n].size();i++){
          if(visited[edges[n][i].first]==false){
              visited[edges[n][i].first] = true;
              if( solve(edges[n][i].first,edges,visited,k,count+edges[n][i].second)){
                  return true;
              }
             visited[edges[n][i].first] = false;
          }
      }
      return false;
    }

    bool pathMoreThanK(int V, int E, int k, int *a) 
    { 
       unordered_map<int,vector<pair<int,int>>> edges;
       for(int i=0;i<E*3;i+=3){
           edges[a[i]].push_back({a[i+1],a[i+2]});
           edges[a[i+1]].push_back({a[i],a[i+2]});
       }
       vector<bool> visited(V,false);
              visited[0] = true;
              if(solve(0,edges,visited,k,0)){
                  return true;
              }
             
       return false;
    } 
};

***********************************************************************************************
11 - 298 - Implement two stacks in an array ( 27/10/23 ) ****

class twoStacks
{
    vector<int> v1;
    vector<int> v2;
    int n;
    public:
    
 
    //Function to push an integer into the stack1.
    void push1(int x)
    {
     v1.push_back(x);   
    }
    
    //Function to push an integer into the stack2.
    void push2(int x)
    {
       v2.push_back(x);
    }
    
    //Function to remove an element from top of the stack1.
    int pop1()
    {
        if(v1.size()==0){
            return -1;
        }
        else{
            n = v1[v1.size()-1];
            v1.pop_back();
            return n;
        }
    }
    
    //Function to remove an element from top of the stack2.
    int pop2()
    {
       if(v2.size()==0){
           return -1;
       }
       else{
           n = v2[v2.size()-1];
           v2.pop_back();
           return n;
       }
    }
};

*******************************************************************************************************
