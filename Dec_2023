*****************************************************************************************************
**** Majority Element ( 01/12/23 ) ****

class Solution{
  public:
     // Function to find majority element in the array
    // a: input array
    // size: size of input array
    int majorityElement(int a[], int size)
    {
        int m = -1;
        for(int i=0;i<size;i++){
            m = max(m,a[i]);
        }
        vector<int> v(m+1,0);
        for(int i=0;i<size;i++){
            v[a[i]]++;
            if(v[a[i]] > size/2){
                return a[i];
            }
        }
        return -1;
    }
};

******************************************************************************************************
**** 2 - 40 - Find the median ( 02/12/23 ) ****

class Solution
{
public:
	public:
		int find_median(vector<int> v)
		{
		    sort(v.begin(),v.end());
		    if(v.size()%2){
		       return v[v.size()/2];
		    }
		    return (v[v.size()/2]+v[(v.size()/2)-1])/2;
		}
};

********************************************************************************************************
**** 3 - 198 - Sum Tree ( 02/12/23 ) ****

class Solution
{
    private:
    pair<bool,int> solve(Node* root){
        if(root==NULL){
            pair<bool,int> p=make_pair(true,0);
            return p;
        }
        if(root->left==NULL && root->right==NULL){
            pair<bool,int> p=make_pair(true,root->data);
            return p;
        }
        pair<bool,int> left=solve(root->left);
        pair<bool,int> right=solve(root->right);
        bool sum= (left.second+right.second)==root->data;
        pair<bool,int> ans;
        ans.first=(left.first && right.first && sum);
        ans.second=left.second+right.second+root->data;
        return ans;
    }
    public:
    bool isSumTree(Node* root)
    {
         return solve(root).first;
    }
};

***********************************************************************************************************
